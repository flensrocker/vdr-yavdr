Description: Invalid suffix on Literal with GCC 4.8 and C++11
 warning: invalid suffix on literal; C++11 requires a space between literal and identifier [-Wliteral-suffix]
Origin: http://www.linuxtv.org/pipermail/vdr/2015-January/028603.html
Forwarded: yes
Author: Joerg Bornkessel <hd_brummy@gentoo.org> Jan/18/2015

--- a/dvbsubtitle.c
+++ b/dvbsubtitle.c
@@ -1042,7 +1042,7 @@
     default: dbgpages("unknown page state: %d<br>\n", pageState);
     }
   bs.SkipBits(2); // reserved
-  dbgpages("<hr>\n<b>page</b> id %d version %d pts %"PRId64" timeout %d state %d<br>\n", pageId, pageVersionNumber, pts, pageTimeout, pageState);
+  dbgpages("<hr>\n<b>page</b> id %d version %d pts %" PRId64 " timeout %d state %d<br>\n", pageId, pageVersionNumber, pts, pageTimeout, pageState);
   regionRefs.Clear();
   while (!bs.IsEOF())
         regionRefs.Add(new cSubtitleRegionRef(bs));
@@ -1073,7 +1073,7 @@
     default: dbgpages("unknown page state: %d<br>\n", pageState);
     }
   bs.SkipBits(6);
-  dbgpages("<hr>\n<b>page</b> id %d version %d pts %"PRId64" timeout %d state %d<br>\n", pageId, pageVersionNumber, pts, pageTimeout, pageState);
+  dbgpages("<hr>\n<b>page</b> id %d version %d pts %" PRId64 " timeout %d state %d<br>\n", pageId, pageVersionNumber, pts, pageTimeout, pageState);
   regionRefs.Clear();
   pending = true;
 }
@@ -1384,7 +1384,7 @@
      if (Length > PayloadOffset + SubstreamHeaderLength) {
         int64_t pts = PesHasPts(Data) ? PesGetPts(Data) : -1;
         if (pts >= 0)
-           dbgconverter("converter PTS: %"PRId64"<br>\n", pts);
+           dbgconverter("converter PTS: %" PRId64 "<br>\n", pts);
         const uchar *data = Data + PayloadOffset + SubstreamHeaderLength; // skip substream header
         int length = Length - PayloadOffset - SubstreamHeaderLength; // skip substream header
         if (ResetSubtitleAssembler)
@@ -1420,7 +1420,7 @@
      if (Length > PayloadOffset) {
         int64_t pts = PesHasPts(Data) ? PesGetPts(Data) : -1;
         if (pts >= 0)
-           dbgconverter("converter PTS: %"PRId64"<br>\n", pts);
+           dbgconverter("converter PTS: %" PRId64 "<br>\n", pts);
         const uchar *data = Data + PayloadOffset;
         int length = Length - PayloadOffset;
         if (length > 0) {
@@ -1488,7 +1488,7 @@
                         dbgoutput("showing bitmap #%d of %d<br>\n", sb->Index() + 1, bitmaps->Count());
                         sb->Draw(osd);
                         Timeout.Set(sb->Timeout() * 1000);
-                        dbgconverter("PTS: %"PRId64"  STC: %"PRId64" (%"PRId64") timeout: %d<br>\n", sb->Pts(), STC, Delta, sb->Timeout());
+                        dbgconverter("PTS: %" PRId64 "  STC: %" PRId64 " (%" PRId64 ") timeout: %d<br>\n", sb->Pts(), STC, Delta, sb->Timeout());
                         }
                      }
                   else
--- a/recording.c
+++ b/recording.c
@@ -1762,7 +1762,7 @@
                     off_t FileSizeSrc = FileSize(FileNameSrc);
                     off_t FileSizeDst = FileSize(FileNameDst);
                     if (FileSizeSrc != FileSizeDst) {
-                       esyslog("ERROR: file size discrepancy: %"PRId64" != %"PRId64, FileSizeSrc, FileSizeDst);
+                       esyslog("ERROR: file size discrepancy: %" PRId64 " != %" PRId64, FileSizeSrc, FileSizeDst);
                        break;
                        }
                     }
@@ -2489,7 +2489,7 @@
            delta = int(buf.st_size % sizeof(tIndexTs));
            if (delta) {
               delta = sizeof(tIndexTs) - delta;
-              esyslog("ERROR: invalid file size (%"PRId64") in '%s'", buf.st_size, *fileName);
+              esyslog("ERROR: invalid file size (%" PRId64 ") in '%s'", buf.st_size, *fileName);
               }
            last = int((buf.st_size + delta) / sizeof(tIndexTs) - 1);
            if ((!Record || Update) && last >= 0) {
--- a/remote.c
+++ b/remote.c
@@ -124,7 +124,7 @@
 bool cRemote::Put(uint64_t Code, bool Repeat, bool Release)
 {
   char buffer[32];
-  snprintf(buffer, sizeof(buffer), "%016"PRIX64, Code);
+  snprintf(buffer, sizeof(buffer), "%016" PRIX64, Code);
   return Put(buffer, Repeat, Release);
 }
 
